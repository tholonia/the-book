#!/usr/bin/env python

import getopt
import sys
from os import path
from shutil import copyfile
from shutil import copy2
import toml, os, sys
sys.path.insert(1, '/home/jw/books/tholonia/code/hexani/')
import lapselib as ll

thisprog = os.path.basename(__file__)
ll.banner(thisprog)

# -- load config data ------------
cwd = os.getcwd()
argv = sys.argv[1:]
dir = "MISSING"

# try:
#     opts, args = getopt.getopt(argv, "d:", ["dir="])
# except getopt.GetoptError as err:
#     sys.exit(2)
# for opt, arg in opts:
#     if opt in ("-d", "--dir"):
#         dir = arg
#         tmp = dir.split("_")
#         name = tmp[0]
#         series = tmp[1]

wpath = f"{cwd}"
C = toml.load(f"{wpath}/build.toml")
# -- end load -----------------------


# print(C['def']['root'])


# # build_1
WD = C['def']['root']
REPO = C['def']['repo']


quiet = ""  # > /dev/null 2>&1"

# def os_mkdir(path):
#     try:
#         os.mkdir(path)
#     except OSError as error:
#         print(f"{path} already exists...",flush=True)
#
#-------------------------------------------------------------------------------DELETE
# ll.wcremove(f"{WD}/nohup.out")

ll.runthis(f"echo \">>>>> build.py\" > {WD}/nohup.out")
ll.rm_rf(f"{WD}/tmp")
ll.wcmkdir(f"{WD}/tmp")

if not (path.exists(f"{WD}/DESCRIPTOR_ONLY")):
    # ll.runthis(f"{C.root}/SET_pending2running.sh {WD}/build.dat.sh")  #JWFIX
    if not (path.exists(f"{WD}/NODELETE")  ):
        ll.rm_rf(f"{WD}/gif")
        ll.rm_rf(f"{WD}/ORG")
        ll.rm_rf(f"{WD}/prev")

    # ll.wcmkdir(WD)
    ll.wcmkdir(WD+"/ORG")
    ll.wcmkdir(WD+"/ORG/details")
    ll.wcmkdir(WD+"/prev")
    # ll.runthis(f"mkdir {WD}  {quiet}", "#3")
    # ll.runthis(f"mkdir {WD}/ORG  {quiet}", "#4")
    # ll.runthis(f"mkdir {WD}/ORG/details  {quiet}", "#5")
    # ll.runthis(f"mkdir {WD}/prev  {quiet}", "#6")


    # ll.runthis(f"cp {WD}/hex_builder_lapse.py {WD}/_{dir}_hex_builder_lapse.py", "#7")
    # ll.runthis(f"cp {WD}/RUN_GIF.py {WD}/_{dir}_RUN_GIF.py", "#8")
    # ll.runthis(f"cp {WD}/HB_frames.py {WD}/_{dir}_HB_frames.py", "#9")
    if (C['def']['update']):
        print(f"COPYING NEW {REPO}/HB_descriptor.py to {WD}/_HB_descriptor.py")
        copy2(f"{REPO}/HB_descriptor.py", f"{WD}/_HB_descriptor.py")

        print(f"COPYING NEW {REPO}/HB_lapse.py to {WD}/_HB_lapse.py")
        copy2(f"{REPO}/HB_lapse.py", f"{WD}/_HB_lapse.py")

        print(f"COPYING NEW {REPO}/HB_rungif.py to {WD}/_HB_rungif.py")
        copy2(f"{REPO}/HB_rungif.py",f"{WD}/_HB_rungif.py")

        print(f"COPYING NEW {REPO}/HB_frames.py to {WD}/_HB_frames.py")
        copy2(f"{REPO}/HB_frames.py",f"{WD}/_HB_frames.py")

        print(f"COPYING NEW {REPO}/HB_speedup.py to {WD}/_HB_speedup.py")
        copy2(f"{REPO}/HB_speedup.py",f"{WD}/_HB_speedup.py")

        print(f"COPYING NEW {REPO}/HB_zoomin.py to {WD}/_HB_zoomin.py")
        copy2(f"{REPO}/HB_zoomin.py",f"{WD}/_HB_zoomin.py")
    else:
        print(f"USING ORIGINAL CODE")


# # to only build descriptors, "touch DESCRIPTOR_ONLY"

copy2(f"{REPO}/HB_descriptor.py",f"{WD}/_HB_descriptor.py")
# ll.runthis(f"cp {WD}/HB_descriptor.py {WD}/_{dir}_HB_descriptor.py", "#10")

# ==========================================================================================
f = open(f"{WD}/Xerrors.txt", "w")
f.close()

# server-args="--server-args ':99 -screen 0 1200x1200x24+32'"
# export DISPLAY=:4

Xcmd = ""
if (C['def']['background'][0]):
    Xcmd = f"/usr/bin/xvfb-run -noreset -w 3 -d -e {WD}/Xerrors.txt"

# argstr = ll.argstring(C)ls

#-------------------------------------------------------------------------------HB_descriptor
cmd = f"{WD}/_HB_descriptor.py"
ll.runthis(cmd, "#11", thisprog)
#-------------------------------------------------------------------------------HB_frames
if not (path.exists(f"{WD}/RUNGIFONLY")):
    cmd = f"{Xcmd} {WD}/_HB_frames.py "
    ll.runthis(cmd, "#12", thisprog)
#-------------------------------------------------------------------------------RUN_GIF
# #only continue if the final image has been greated
# searchfor = f"{WD}/ORG/hex-360.gif"
# if (path.exists(searchfor)):
#     if not (path.exists(f"{WD}/DESCRIPTOR_ONLY")):  # if the file exists, skip this part
cmd = f"{WD}/_HB_rungif.py"
ll.runthis(cmd, "#13", thisprog)
# else:
#     print("\t┌───────────────────────────────────────────────────",flush=True)
#     print(f"\t│ MISSING {searchfor}",flush=True)
#     print("\t└───────────────────────────────────────────────────",flush=True)
#     exit()
#-------------------------------------------------------------------------------hex_builder

# ll.wcdel(f"{WD}/_hex_builder_lapse.py")
# ll.wcdel(f"{WD}/_RUN_GIF.py")
# ll.wcdel(f"{WD}/_HB_frames.py")
# ll.wcdel(f"{WD}/_HB_descriptor.py")
# ll.wcdel(f"{WD}/_Hspeedup.py")
